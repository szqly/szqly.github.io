<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>找到字符串中所有字母异位词</title>
      <link href="/2023/11/03/%E6%89%BE%E5%88%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%89%80%E6%9C%89%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/"/>
      <url>/2023/11/03/%E6%89%BE%E5%88%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%89%80%E6%9C%89%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定两个字符串 s 和 p，找到 s 中所有 p 的异位词 的子串，返回这些子串的起始索引。<br>不考虑答案输出的顺序。<br>异位词 指由相同字母重排列形成的字符串（包括相同的字符串）。</p><p>题目链接：<a href="https://leetcode.cn/problems/find-all-anagrams-in-a-string">https://leetcode.cn/problems/find-all-anagrams-in-a-string</a></p><h2 id="思路和算法"><a href="#思路和算法" class="headerlink" title="思路和算法"></a>思路和算法</h2><p>题目要求要找到 s 中所有 p 的异位词，根据异位词的定义，只需要保证在 s 中 p 长度内，<br>p 的每一个字母均出现即可，这样只需要维持一个长度为 p 字符串长度的窗口，然后随着移动，<br>不断更新窗口中的各个字符个数，然后判断与 p 中各个字符个数是否相等，如果相等，<br>表明此时窗口中的字符串就是 p 的异位词，记录窗口左端位置。直到窗口右端移动到 s 串的最右端。</p><p>判断字符串中各个字符个数时，可以循环遍历进行判断。也可以实时维护窗口中的各个字符情况，<br>这样就不需要每次都进行一次循环，理论上可以提高运行效率，目前还没有尝试此的方法，不知是否可行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* <span class="title function_">findAnagrams</span><span class="params">(<span class="type">char</span> * s, <span class="type">char</span> * p, <span class="type">int</span>* returnSize)</span>&#123;</span><br><span class="line">    <span class="type">int</span> len_s=<span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="type">int</span> len_p=<span class="built_in">strlen</span>(p);</span><br><span class="line">    <span class="type">int</span> left=<span class="number">0</span>,right=len_p<span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span>* res=<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * len_s);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(len_s &lt; len_p)</span><br><span class="line">    &#123;</span><br><span class="line">        *returnSize=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> hash_s[<span class="number">26</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> hash_p[<span class="number">26</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len_p;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        hash_p[p[i]-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        hash_s[s[i]-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> left=<span class="number">0</span>;left&lt;=len_s-len_p;left++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(hash_s[i] != hash_p[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">25</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                res[count++]=left;</span><br><span class="line">            &#125;                </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        hash_s[s[left]-<span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">        <span class="keyword">if</span>(left+len_p&lt;len_s)</span><br><span class="line">        &#123;</span><br><span class="line">            hash_s[s[left+len_p]-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *returnSize=count;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小覆盖字串</title>
      <link href="/2023/11/02/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%97%E4%B8%B2/"/>
      <url>/2023/11/02/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%97%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个字符串 s 、一个字符串 t 。返回 s 中涵盖 t 所有字符的最小子串。<br>如果 s 中不存在涵盖 t 所有字符的子串，则返回空字符串 “” 。</p><p>题目链接：<a href="https://leetcode.cn/problems/minimum-window-substring">https://leetcode.cn/problems/minimum-window-substring</a></p><h2 id="思路和算法"><a href="#思路和算法" class="headerlink" title="思路和算法"></a>思路和算法</h2><p>此题目希望返回s中能涵盖t所有字符的最小字串，可以采用滑动窗口的思路解题。<br>首先定义l和r代表滑动窗口的左边界和右边界。<br>1.开始时r不断加1，直到l和r之间能涵盖t中的所有字符，记录此时的l和r和滑动窗口的长度。<br>2.随后，不断将l加1，直到l和r之间刚好不能涵盖t中的所有字符。<br>3.比较此时的滑动窗口的长度和记录的长度，如果此时的长度更短则更新记录的窗口区间。<br>4.重复第一二三步，直到r到达s的最右边，输出最后记录区间的字符串即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>* <span class="title function_">minWindow</span><span class="params">(<span class="type">char</span>* s, <span class="type">char</span>* t)</span> &#123;</span><br><span class="line">    <span class="type">int</span> len=<span class="built_in">strlen</span>(t);</span><br><span class="line">    <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> flag[<span class="number">256</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> l=<span class="number">0</span>,r=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(t);i++)&#123;</span><br><span class="line">        flag[t[i]]--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(s);i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag[s[i]]&lt;<span class="number">0</span>||flag[s[i]]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(flag[s[i]]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                len--;</span><br><span class="line">            &#125;</span><br><span class="line">            flag[s[i]]++;</span><br><span class="line">            <span class="keyword">if</span>(flag[s[i]]==<span class="number">0</span>)&#123;</span><br><span class="line">            flag[s[i]]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">            <span class="keyword">if</span>(len==<span class="number">0</span>)&#123;</span><br><span class="line">                r=i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(len&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> rel=l;</span><br><span class="line">    <span class="type">int</span> rer=r;</span><br><span class="line">    <span class="type">int</span> relen=r-l+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(r&lt;<span class="built_in">strlen</span>(s))&#123;</span><br><span class="line">        <span class="keyword">if</span>(len==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(flag[s[l]]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                flag[s[l]]--;</span><br><span class="line">                <span class="keyword">if</span>(flag[s[l]]&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                    len++;</span><br><span class="line">                    flag[s[l]]--;</span><br><span class="line">                &#125;</span><br><span class="line">                l++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(flag[s[l]]==<span class="number">0</span>)&#123;</span><br><span class="line">            l++;</span><br><span class="line">&#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            r++;</span><br><span class="line">            <span class="keyword">if</span>(flag[s[r]]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                flag[s[r]]++;</span><br><span class="line">                <span class="keyword">if</span>(flag[s[r]]==<span class="number">0</span>)&#123;</span><br><span class="line">                flag[s[r]]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">                len--;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(flag[s[r]]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            flag[s[r]]++;</span><br><span class="line">&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(relen&gt;r-l+<span class="number">1</span>&amp;&amp;len==<span class="number">0</span>)&#123;</span><br><span class="line">        rel=l;</span><br><span class="line">        rer=r;</span><br><span class="line">        relen=r-l+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> h=<span class="number">0</span>;</span><br><span class="line">    len=<span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="type">char</span> *res = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>) * (len + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=rel;i&lt;rer+<span class="number">1</span>;i++)&#123;</span><br><span class="line">    res[h]=s[i];</span><br><span class="line">    h++;</span><br><span class="line">&#125;</span><br><span class="line">    res[h]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>滑动窗口最大值</title>
      <link href="/2023/08/30/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC/"/>
      <url>/2023/08/30/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。<br>返回滑动窗口中的最大值。</p><p>题目链接：<a href="https://leetcode-cn.com/problems/sliding-window-maximum/">https://leetcode-cn.com/problems/sliding-window-maximum/</a></p><h2 id="思路和算法："><a href="#思路和算法：" class="headerlink" title="思路和算法："></a>思路和算法：</h2><p>初始采用暴力的解法，遍历每一个窗口，记录最大值，很显然它超时了。<br>考虑到在一定的区间内，最大值只会是原来的最大值，或者新进入窗口的值，那么对于一个滑动的窗口就只需要考虑原来的<br>最大值和新进入的最大值的大小比较。<br>但是此时又出现了一个新的问题：如果没有出现新的最大值，原来的最大值又要从左边离开滑动窗口，此时又要遍历这个窗口内的数据<br>再次寻找最大值，显然此时在某些情况下和暴力遍历的解法效率相同。<br>此时希望能够知道这个窗口中的第二大的数是什么，于是可以使用双向队列，通过对队列的操作使队列单调递减。<br>如何使维护队列的单调性呢？在窗口向右滑动时，将新的元素与队尾的元素比较，如果队尾的元素小于新的元素，<br>那么就将队尾的元素移除出队列，因为此时只要新的元素存在，那么最大的元素就不可能是那个队尾的元素。<br>一直比较，直到队尾元素大于新的元素，或者队列为空。<br>在窗口右移的过程中，最大的元素可能会在窗口的最左边移出窗口，此时，就需要将队列的队首元素移除，使队首元素在窗口中。<br>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* <span class="title function_">maxSlidingWindow</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> k, <span class="type">int</span>* returnSize)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="built_in">queue</span>[numsSize];</span><br><span class="line">    <span class="type">int</span> front = <span class="number">0</span>, rear = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(right&lt;numsSize)&#123;</span><br><span class="line">        <span class="keyword">while</span>(rear&gt;=front&amp;&amp;nums[right]&gt;<span class="built_in">queue</span>[rear])&#123;</span><br><span class="line">            rear--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">queue</span>[++rear]=nums[right++];</span><br><span class="line">        <span class="keyword">if</span>(left+k&lt;=right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[left]==<span class="built_in">queue</span>[front])&#123;</span><br><span class="line">                front++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                nums[left]=<span class="built_in">queue</span>[front]</span><br><span class="line">            &#125;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    *returnSize=numsSize-k+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> nums;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>和为K的子数组</title>
      <link href="/2023/08/30/%E5%92%8C%E4%B8%BAK%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/"/>
      <url>/2023/08/30/%E5%92%8C%E4%B8%BAK%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给你一个整数数组 nums 和一个整数 k ，请你统计并返回 该数组中和为 k 的连续子数组的个数 。</p><h2 id="思路和算法："><a href="#思路和算法：" class="headerlink" title="思路和算法："></a>思路和算法：</h2><p>将每一个出现过的前缀和用hash表记录下来，然后判断对于某一个前缀和，其值减去k的前缀和是否存在，<br>如果存在，那么这两个位置必定存在一个子数组的和为k，那么结果加上其值减去k的前缀和的数量即可。<br>这样遍历整个数组，就可以得到答案。<br>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num[<span class="number">40000002</span>]; <span class="comment">//用于记录前缀和数量的数组。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">subarraySum</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> k)</span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(num,<span class="number">0</span>,<span class="keyword">sizeof</span>(num));</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;<span class="comment">//连续子数组的个数</span></span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    num[sum+<span class="number">20000001</span>]++;<span class="comment">//因为数据中有负数，数组下标+20000001使0居中，方便负数的记录</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;numsSize;++i)&#123;</span><br><span class="line">        sum+=nums[i];</span><br><span class="line">        <span class="keyword">if</span>(num[sum+<span class="number">20000001</span>-k]&gt;<span class="number">0</span>)&#123;<span class="comment">//num[sum+20000001-k]&gt;0 证明此时存在子数组和为k</span></span><br><span class="line">            count+=num[sum+<span class="number">20000001</span>-k];</span><br><span class="line">        &#125;</span><br><span class="line">        num[sum+<span class="number">20000001</span>]++;<span class="comment">//增加这个前缀和的数量</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>买卖股票问题</title>
      <link href="/2023/03/26/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E9%97%AE%E9%A2%98/"/>
      <url>/2023/03/26/%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>详情见leetcode第122，309，714等题</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><p>这几道题目，共同点是可以多次购买和售出股票，可以用状态转移的思路解决。<br>122，714两题可以简单的将状态分为：<br>持有股票，和未持有股票两种状态。持有股票的状态可以由前一天的持有股票状态和<br>未持有股票状态转移得到。假设今天持有股票的状态为dp[i][0],昨天持有股票状态<br>为dp[i-1][0],昨天未持有股票的状态为dp[i-1][1],今天的股票价格为prices[i],<br>那么今天持有股票的最大利润:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][0]=max(dp[i-1][0],dp[i-1][1]-prices[i])</span><br></pre></td></tr></table></figure><p>同样今天未持有股票的最大利润为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][1]=max(dp[i-1][1],dp[i-1][0]+prices[i])</span><br></pre></td></tr></table></figure><p>对于309题<br>需要将未持有股票分为两种状态——未持有股票在冷冻期dp[i][1]，未持有股票不在冷冻期dp[i][2]。<br>未持有股票在冷冻期说明刚刚卖了股票，只能由持有股票状态转移，<br>因为未持有股票在冷冻期不能持续，故不能从未持有股票在冷冻期转移得到所以： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][1]=dp[i-1][0]+prices[i]</span><br></pre></td></tr></table></figure><p>未持有股票不在冷冻期可以由未持有股票冷冻期和未持有股票不在冷冻期转移得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][2]=max(dp[i-1][1],dp[i-1][2])</span><br></pre></td></tr></table></figure><p>持有股票可以由未持有股票不在冷冻期和持有股票两种状态转移得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i][0]=max(dp[i-1][2]-prices[i],dp[i-1][0])</span><br></pre></td></tr></table></figure><p>所有状态中的最大利润即最大的利润</p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode020有效的括号</title>
      <link href="/2023/02/19/leetcode020%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/"/>
      <url>/2023/02/19/leetcode020%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h2><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’的字符串 s ，判断字符串是否有效。</p><p>有效字符串需满足：</p><p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>每个右括号都有一个对应的相同类型的左括号。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/valid-parentheses">https://leetcode.cn/problems/valid-parentheses</a><br>著作权归领扣网络所有。</p><h2 id="思路和算法"><a href="#思路和算法" class="headerlink" title="思路和算法"></a>思路和算法</h2><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>由于需要对括号进行一一配对，不难发现可以采用栈这种结构来解决。<br>根据题目有效字符串的定义，可以将上述字符串分为两组，一组为左括号，另一组为右括号，遍历字符串，<br>当字符为左括号时，就执行压栈操作，是右括号时就直接与前面一个栈顶元素进行匹配判断，<br>即判断是不是与右括号相匹配的左括号，如果是就将栈顶元素弹出，继续判断字符串剩余字符，<br>如果不是，直接返回，因为只要存在一组不匹配的字符就说明不是有效字符串，<br>如果数组遍历完毕，判断栈中是否还有元素，如果没有，那么这个字符串为有效字符串。<br>（特别的需要注意的是，如果第一个字符是右括号，如果直接用i-1访问数组 会导致数组越界）<br>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">isValid</span><span class="params">(<span class="type">char</span> * s)</span>&#123;</span><br><span class="line">    <span class="type">char</span> zhan[<span class="built_in">strlen</span>(s)];</span><br><span class="line">    <span class="type">int</span> n=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i;i&lt;<span class="built_in">strlen</span>(s);++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">&#x27;(&#x27;</span>||s[i]==<span class="string">&#x27;[&#x27;</span>||s[i]==<span class="string">&#x27;&#123;&#x27;</span>)&#123;</span><br><span class="line">            zhan[n++]=s[i];</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i]==<span class="string">&#x27;)&#x27;</span>&amp;&amp;zhan[n<span class="number">-1</span>]==<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                --n;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">&#x27;]&#x27;</span>&amp;&amp;zhan[n<span class="number">-1</span>]==<span class="string">&#x27;[&#x27;</span>)&#123;</span><br><span class="line">                --n;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">&#x27;&#125;&#x27;</span>&amp;&amp;zhan[n<span class="number">-1</span>]==<span class="string">&#x27;&#123;&#x27;</span>)&#123;</span><br><span class="line">                --n;</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode001两数之和</title>
      <link href="/2023/02/13/leetcode001%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>/2023/02/13/leetcode001%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给定一个整数数组 nums和一个整数目标值 target，请你在该数组中找出 和为目标值 target 的那两个整数，并返回它们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/two-sum">https://leetcode.cn/problems/two-sum</a><br>著作权归领扣网络所有。</p><h2 id="思路及算法"><a href="#思路及算法" class="headerlink" title="思路及算法"></a>思路及算法</h2><h3 id="1-暴力枚举"><a href="#1-暴力枚举" class="headerlink" title="1.暴力枚举"></a>1.暴力枚举</h3><p>直接将所给的数组遍历，对于数组中任意一个数 x，查找数组中是否存在 target-x，如果存在就返回两个数的下标<br>。代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* <span class="title function_">twoSum</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> target, <span class="type">int</span>* returnSize)</span>&#123;</span><br><span class="line">    <span class="type">int</span> *result = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*<span class="number">2</span>);</span><br><span class="line">    *returnSize=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;numsSize;++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;numsSize;++j)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]+nums[j]==target)&#123;</span><br><span class="line">                result[<span class="number">0</span>]=i;</span><br><span class="line">                result[<span class="number">1</span>]=j;</span><br><span class="line">                (*returnSize)=<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，当在判断第 i 个数时，前面的所有数都与第 i 个数判断过了，故第 i 个数直接从第 i+1 个数开始判断</p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/2023/02/12/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2023/02/12/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<p>第一篇文章</p>]]></content>
      
      
      
        <tags>
            
            <tag> 无聊 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
